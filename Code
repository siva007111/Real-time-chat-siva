1. Backend (Node.js + Express + Socket.IO)

### server/package.json

```json
{
  "name": "chat-server",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "socket.io": "^4.7.5"
  }
}
```

### server/index.js

```js
import express from "express";
import http from "http";
import { Server } from "socket.io";
import cors from "cors";

const app = express();
const server = http.createServer(app);

app.use(cors());

const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});

io.on("connection", (socket) => {
  console.log("User connected:", socket.id);

  socket.on("send_message", (data) => {
    io.emit("receive_message", data);
  });

  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.id);
  });
});

const PORT = 5000;
server.listen(PORT, () => console.log(`Server running on port ${PORT}`));
```

Run it:

```bash
cd server
npm install
npm start
```

---
 2. Frontend (React + Socket.IO client)

### client/package.json

```json
{
  "name": "chat-client",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.3.0",
    "react-dom": "^18.3.0",
    "socket.io-client": "^4.7.5"
  },
  "scripts": {
    "start": "react-scripts start"
  }
}
```

(If you donâ€™t have React set up yet, run `npx create-react-app client` first, then replace the files below.)

---

### client/src/App.js

```jsx
import React from "react";
import Chat from "./Chat";

function App) {
  return (
    <div className="App">
      <h2>Real-Time Chat</h2>
      <Chat />
    </div>
  );
}

export default App;
```

---

### client/src/Chat.js

```jsx
import React, { useState, useEffect } from "react";
import { io } from "socket.io-client";
import "./Chat.css";

const socket = io("http://localhost:5000");

function Chat() {
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState([]);

  const sendMessage = () => {
    if (message.trim() !== "") {
      socket.emit("send_message", { text: message });
      setMessage("");
    }
  };

  useEffect(() => {
    socket.on("receive_message", (data) => {
      setMessages((prev) => [...prev, data]);
    });

    return () => socket.off("receive_message");
  }, []);

  return (
    <div className="chat-container">
      <div className="chat-box">
        {messages.map((msg, i) => (
          <div key={i} className="message">{msg.text}</div>
        ))}
      </div>

      <div className="input-box">
        <input
          type="text"
          value={message}
          placeholder="Type your message..."
          onChange={(e) => setMessage(e.target.value)}
          onKeyPress={(e) => e.key === "Enter" && sendMessage()}
        />
        <button onClick={sendMessage}>Send</button>
      </div>
    </div>
  );
}

export default Chat;
```

---

### client/src/Chat.css

```css
.chat-container {
  width: 400px;
  margin: 20px auto;
  border: 1px solid #aaa;
  border-radius: 8px;
  padding: 10px;
  background-color: #f8f8f8;
}

.chat-box {
  height: 300px;
  overflow-y: auto;
  border-bottom: 1px solid #ccc;
  margin-bottom: 10px;
  padding: 10px;
}

.message {
  background: #e1ffc7;
  margin-bottom: 5px;
  padding: 6px 10px;
  border-radius: 5px;
}

.input-box {
  display: flex;
}

input {
  flex: 1;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  margin-left: 5px;
  padding: 8px 15px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
}
```

---

### Run frontend:

```bash
cd client
npm install
npm start
```

Then open [http://localhost:3000](http://localhost:3000).

---

##  You now have:

* A **Node.js + Express + Socket.IO** backend.
* A **React** frontend that connects via WebSockets.
* Real-time messaging between all connected clients.

---

Would you like me to extend this with **usernames** and **chat rooms** next?
